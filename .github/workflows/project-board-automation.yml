name: Project Board Automation with Labels (GraphQL)

on:
  issues:
    types: [opened, labeled, edited, closed, reopened]
  pull_request:
    types: [opened, labeled, edited, review_requested, closed, reopened]

jobs:
  automate-board:
    runs-on: ubuntu-latest
    steps:
      - name: Automate Project Board with Labels using GraphQL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectNumber = 111;
            const projectId = '111';
            
            const columnMapping = {
              "type: planning": "Planning",
              "type: research": "Planning",
              "status: to do": "To Do",
              "type: feature": "To Do",
              "type: good first issue": "To Do",
              "type: help wanted": "To Do",
              "type: question": "To Do",
              "status: in progress": "In Progress",
              "type: bug": "In Progress",
              "type: improvement / refactor": "In Progress",
              "status: waiting for review": "In Review",
              "type: docs": "In Review",
              "type: wiki": "In Review",
              "status: done": "Done"
            };

            const issue = context.payload.issue || context.payload.pull_request;
            const labels = issue.labels;
            let targetColumn = "Planning"; // Default column

            // Determine the target column based on labels
            for (const label of labels) {
              if (columnMapping[label.name.toLowerCase()]) {
                targetColumn = columnMapping[label.name.toLowerCase()];
                break;
              }
            }

            if (issue.state === "closed") {
              targetColumn = "Done";
            }

            const query = `
              query ($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    id
                    title
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          name
                          id
                        }
                      }
                    }
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue { id }
                          ... on PullRequest { id }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const response = await github.graphql(query, {
              projectId
            });

            const project = response.node;
            const items = project.items.nodes;
            const existingItem = items.find(item => 
              item.content?.id === issue.node_id
            );

            if (existingItem) {
              console.log(`Item already exists in project. Removing it for update.`);
              await github.graphql(`
                mutation ($itemId: ID!) {
                  deleteProjectV2Item(input: { projectId: "${projectId}", itemId: $itemId }) {
                    deletedItemId
                  }
                }
              `, {
                itemId: existingItem.id
              });
            }

            console.log(`Adding item to the project board in column: ${targetColumn}`);

            await github.graphql(`
              mutation ($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item {
                    id
                  }
                }
              }
            `, {
              projectId,
              contentId: issue.node_id
            });

            console.log(`Card successfully added to column: ${targetColumn}`);
